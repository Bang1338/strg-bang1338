// ==UserScript==
// @name         BetterCSEdit Mobile
// @namespace    BCSE GSM
// @version      3
// @description  A better editing for Comic Studio!
// @author       bang1338
// @match        *://*.comic.studio/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=comic.studio
// @grant        none
// @require      https://code.jquery.com/jquery-3.6.0.min.js
// @require      https://jeremyckahn.github.io/keydrown/dist/keydrown.min.js
// @require      https://unpkg.com/js-sha3
// @license      MIT
// ==/UserScript==

// === Inspired from: ===
// BetterEdit   : https://github.com/HJfod/BetterEdit
// BetterDiscord: https://betterdiscord.app/
// Mega Hack Pro: https://absolllute.com/store/view_mega_hack_pro
// zBot         : https://zbot.figmentcoding.me/
// === End of inspr ===

// === Powered by: ===
// jQuery.
// === End powered ===

// ==Changelog==
// 0.1   - First script, which you have to open the script to change max size.
// 0.11  - Now work on: [studios].comic.studio
// 0.2   - Added textbox, for both resize and rotation.
// 1.0   - Added slider, so you don't have to :) biggest update ever
// 1.1   - Change (max) and (min) to + and - for 100% zoom
// 1.2   - Removed maxlength = '3' because it's doesn't working anymore
// 1.2.1 - Shorten "Rotate" and "Resize" words to "Ro" and "Re" so it will fit some font
// 1.3.1 - Added title bypass for clentside and Added Enable/Disable option, powered by boolean :)
// 1.4   - Added Dark Mode and Custom Welcome.
// 1.4.1 - Fixed bug.
// 1.5   - Fixed a lot of "fatal bug", added Custom Name Role (clientside). This make my brain died a lot.
// 2.0   - Added Custom Banner. Now you can use menu by pressing "Esc" (aka. Escape) key to open and close.
// 2.1   - Added background, View Full Image, Custom Namerole v2, MoreTab. Optimized stuff
// ==Changelog==

// This is Open Source.

'use strict';

// Respect.
console.log("%cWARNING!", "color: red; font-size: 50px");
console.log(`%cDO NOT PASTE ANY SCRIPT FROM SOMEONE IN HERE\nTHERE IS 1000% YOUR ACCOUNT WILL BE STOLEN.`, "font-size: 16px")
console.log(`%c                                      - bang1338, instead of syrupyy`, "font-size: 12px")

// ======================================================================START AUTH======================================================================

// Import the sha3_256 function from the js-sha3 library
const sha3_256 = window.sha3_256;
const sha3_384 = window.sha3_384;

function auth()
{
    // Prompt the user to enter their username and password
    const username = prompt('Enter your username:');
    const password = prompt('Enter your password:');
    let hashedse;
    const urlauth = 'https://bcse-mobile.1338bang.repl.co/auth?user=' + username + '&password=' + password;

    fetch(urlauth)
        .then(response => response.json())
        .then(data => {
        if (data.status === 'valid') {
            // Save the entered values to localStorage
            localStorage.setItem('bcse-gsm-user', username);
            localStorage.setItem('bcse-gsm-sha', sha3_256(password));
            hashedse = sha3_384(sha3_256(password))
            alert('BetterCSEdit Mobile is almost activated, refresh page for final stage');
        } else if (data.status === 'invalid') {
            alert('Incorrect username or password');
        } else if (data.status === 'blank') {
            alert('Enter your username/password next time.');
        }
    });
}

// re-auth if password changed or not
const reauth_username = localStorage.getItem('bcse-gsm-user');
const reauth_pwrdhash = localStorage.getItem('bcse-gsm-sha');

// Check if the username or password hash is null
if (reauth_username !== null && reauth_pwrdhash !== null) {
    const reauth_urlauth = 'https://bcse-mobile.1338bang.repl.co/auth?user=' + reauth_username + '&password=' + reauth_pwrdhash;
    fetch(reauth_urlauth)
        .then(response => response.json())
        .then(data => {
        if (data.status === 'valid') {
            //alert('OK');
            let urlsetting = 'https://bcse-mobile.1338bang.repl.co/getsetting?user=' + reauth_username + '&token=' + sha3_384(reauth_pwrdhash);
            fetch(urlsetting)
                .then(response => response.json())
                .then(data => {
                console.log("aaaaaaaaaaaaaaaaaa");

                // Convert the JSON data to a string
                const dataString = JSON.stringify(data);

                // Save the data string to localStorage
                localStorage.setItem('bcse-gsm-setting', dataString);
                console.log(localStorage.getItem('bcse-gsm-setting'))
            });
        } else if (data.status === 'invalid') {
            alert('Your password likely changed, please re-login.');
        }
    });
}


function addmenu()
{
    // Find the navbar list
    const navbarList = document.querySelector('.navbar-nav.ms-auto');

    // Check if the navbar list exists
    if (navbarList !== null) {
        // Find the "Explore" nav item
        const exploreNavItem = navbarList.querySelector('#nav-explore').parentElement;

        // Create a new "BetterCSEdit" nav item
        const bcseNavItem = document.createElement('li');
        bcseNavItem.classList.add('nav-item');
        bcseNavItem.innerHTML = '<a href="/" id="nav-bcse" class="display-6 fw-bold mb-0 level-4" data-pjax-state="">BetterCSEdit</a>';

        // Insert the new "BetterCSEdit" nav item before the "Explore" nav item
        navbarList.insertBefore(bcseNavItem, exploreNavItem);

        // Find the "BetterCSEdit" link
        const bcseLink = document.querySelector('#nav-bcse');

        // Add a click event listener to the "BetterCSEdit" link
        bcseLink.addEventListener('click', (event) => {
            // Prevent the default link behavior
            event.preventDefault();
            auth();
        });
    }
}
// ====================================================================== END AUTH ======================================================================

if (localStorage.getItem("bcse-gsm-user") !== null)
{
    // Get the data string from localStorage
    let dataString = localStorage.getItem('bcse-gsm-setting');

    // Parse the data string as JSON
    let data = JSON.parse(dataString);

    let rolelevel = data.cnr['cnr-level'];

    let renro = data.renro;
    let tgtb = data.tltb;
    let darkmode = data.darkmode;
    let customwelcome = data.cwm['enabled'];
    let namerole = data.cnr['enabled'];
    let custombanner = data.cbr['enabled'];
    let viewfullimage = data.vfi;
    let customnameroletype = data.cnr['role-option']['cnr-ct'];
    let mtb = data.moretab;
    let background = data.bg['enabled'];

    console.log('renro: ' + renro);
    console.log('tgtb: ' + tgtb);
    console.log('darkmode: ' + darkmode);
    console.log('customwelcome: ' + customwelcome);
    console.log('namerole: ' + namerole);
    console.log('custombanner: ' + custombanner);
    console.log('viewfullimage: ' + viewfullimage);
    console.log('customnameroletype: ' + customnameroletype);
    console.log('background: ' + background);

    // =====[Custom Welcome Message]=====
    let inclnm = data.cwm['cwm-fl'];
    let fw = data.cwm['cwm-first'];
    let lw = data.cwm['cwm-last'];
    let entstr = data.cwm['cwm-txt'];

    console.log('ilclnm: ' + inclnm);
    console.log('fw: ' + fw);
    console.log('lw: ' + lw);
    console.log('entstr: ' + entstr);

    // =====[Custom Namerole]=====
    // 0    = Normal
    // 1    = Beta tester
    // 2    = Moderator
    // 3    = Administrator
    // 4    = syrupyy/Owner
    let nonlnr;
    let n4r = data.cnr['nrname'];
    let nr = rolelevel;

    let customtype = data.cnr['role-option']['cnr-ct'];
    let customtypetxt = data.cnr['cnr-cttxt'];

    let sync = data.cnr['role-option']['cnr-sync'];
    let nosync = data.cnr['role-option']['cnr-nosync'];

    let nrlevel = data.cnr['cnr-level'];
    let nrrole = data.cnr['cnr-role'];

    console.log('nr: ' + nr);
    console.log('nonlnr: ' + nonlnr);
    console.log('n4r: ' + n4r);
    console.log('customtype: ' + customtype);
    console.log('customtypetxt: ' + customtypetxt);
    console.log('sync: ' + sync);
    console.log('nosync: ' + nosync);
    console.log('nrlevel: ' + nrlevel);
    console.log('nrrole: ' + nrrole);

    // =====[/Custom Namerole]=====


    // =====[Custom Banner]=====
    // urlb: URL of banner
    console.log('banner: ' + data.cbr['cbr-url']); // Weird, if I remove this line, "unexpected strict mode reserved word" error will show up.
    let urlb = data.cbr['cbr-url'];
    // =====[/Custom Banner]=====


    // =====[Background]=====
    console.log('Background: ' + data.bg['bg-url']);
    let bgurl = data.bg['bg-url'];
    // =====[/Background]=====


    // =====[More Tab]=====
    console.log('moretab: ' + data.moretab);
    let mtab = data.moretab;
    // =====[/More Tab]=====


    // =======[DONT EDIT]=======
    // or edit if you know what are you doing


    // To remove the fatal flaw, I have to adding URL change function and make sure that it's not studio.
    // get URL
    let url = location.href;
    console.log('first refreshed url: ' + url);

    // I execute this first
    dmode(); // Darkmode alway set first because if background on, the darkmode gone.
    execute();

    // No more 1 second for stuff
    function observeDOM() {
        // select the node that will be observed for changes
        var targetNode = document.body;

        // create a new instance of MutationObserver
        var observer = new MutationObserver(function (mutations) {
            // loop through the mutations that occurred
            mutations.forEach(function (mutation) {
                // do something in response to the mutation
                if (url != location.href) {
                    // page has changed, set new page as 'current'
                    url = location.href;
                    dmode();
                    execute();
                }
                console.log('current url: ' + url);
            });
        });

        // configure the observer to watch for changes to the DOM
        var config = {
            attributes: true,
            childList: true,
            subtree: true
        };

        // start observing the target node for DOM mutations
        observer.observe(targetNode, config);
    }
    observeDOM();

    // subdomain check
    function isSubdomain(url) {
        var regex = new RegExp(/^([a-z]+\:\/{2})?([\w-]+\.[\w-]+\.\w+)$/);
        return !!url.match(regex);
    }

    // URL data warper.
    function urltype(url) {
        var blk = "";
        var result;
        var result0;
        var result1;
        var result2;
        var result3;
        var result4;
        var result5;
        var result6;
        var result7;
        var result8;
        var result9;
        var result10;
        var tmpurl = url;
        var trimurl = url;

        // remove for further check
        tmpurl = tmpurl.replace("https://", "");
        tmpurl = tmpurl.replace("comic.studio/", "");
        console.log('tmpurl: ' + tmpurl);

        trimurl = trimurl.replace("https://", "");
        trimurl = trimurl.replace("/", "");
        console.log('trimurl: ' + trimurl);

        // check if it menu
        if (url == "https://comic.studio/")
            result0 = "menu-1";
        else
            result0 = "menu-0";

        // check if it subdomain
        if (isSubdomain(trimurl))
            result1 = "sd-1";
        else
            result1 = "sd-0"

        // check if studio not a subdomain
        tmpurl = url;
        var r = /\d+/; // regex
        if (tmpurl.includes("/s/") && tmpurl.match(r) > 0)
            result2 = "csnsd-1";
        else
            result2 = "csnsd-0";

        // check if url is user profile.
        tmpurl = url;
        if (tmpurl.includes("/u/"))
            result3 = "user-1";
        else
            result3 = "user-0";

        // check if url is comic.
        tmpurl = url;
        if (tmpurl.includes("/c/"))
            result4 = "comic-1";
        else
            result4 = "comic-0";

        // check if url is studio
        tmpurl = url;
        if (tmpurl.includes("/manage") && tmpurl.match(r) > 0)
            result5 = "studio-1";
        else
            result5 = "studio-0";

        // get username.
        tmpurl = url;
        if (tmpurl.includes("/u/")) {
            result6 = tmpurl.replace('https://comic.studio/u/', '');
        } else
            result6 = "noname";

        // check if url is notifications.
        tmpurl = url;
        if (tmpurl.includes("/notifications"))
            result7 = "noti-1";
        else
            result7 = "noti-0";

        // check if url is feed.
        tmpurl = url;
        if (tmpurl.includes("/feed"))
            result8 = "feed-1";
        else
            result8 = "feed-0";

        // check if url is settings.
        tmpurl = url;
        if (tmpurl.includes("/settings"))
            result9 = "settings-1";
        else
            result9 = "settings-0";

        // check if url is browse.
        tmpurl = url;
        if (tmpurl.includes("/browse"))
            result10 = "browse-1";
        else
            result10 = "browse-0";

        // result.
        result = blk.concat(result0, "|", result1, "|", result2, "|", result3, "|", result4, "|", result5, "|", result5, "|", result6, "|", result7, "|", result8, "|", result9, "|", result10);
        console.log(result);
        return (result);
    }

    if(urltype(url).includes("sd-1") != true || urltype(url).includes("csnsd-1") != true) {
        addmenu();
    }

    // Resize and Rotate input function
    if (Boolean(renro) == true && urltype(url).includes("sd-1") || urltype(url).includes("csnsd-1")) {
        // Resize input (decrease)
        let resmin = document.createElement('input')
        resmin.type = 'text'
        resmin.placeholder = 'Re-'
        document.getElementById('controls').prepend(resmin)
        resmin.oninput = function () {
            document.getElementById('resize').min = this.value;
        }

        // Resize input (increase)
        let resmax = document.createElement('input')
        resmax.type = 'text'
        resmax.placeholder = 'Re+'
        document.getElementById('controls').prepend(resmax)
        resmax.oninput = function () {
            document.getElementById('resize').max = this.value;
        }

        // Rotate input (decrease)
        let rotmin = document.createElement('input')
        rotmin.type = 'text'
        rotmin.placeholder = 'Ro-'
        document.getElementById('controls').appendChild(rotmin)
        rotmin.oninput = function () {
            document.getElementById('rotate').min = this.value;
        }

        // Rotate input (increase)
        let rotmax = document.createElement('input')
        rotmax.type = 'text'
        rotmax.placeholder = 'Ro+'
        document.getElementById('controls').appendChild(rotmax)
        rotmax.oninput = function () {
            document.getElementById('rotate').max = this.value;
        }
    }

    // Custom Banner
    // It's also work with other banner like Shopee thing: http://shopeeplus.com//upload/images/cach-tao-banner-xoay-vong.png
    // Note 1: not supported non-subdomain studio
    // I'm afraid if someone put nsfw banner, so...
    // Note 2: I will include nsfw detector library soon.
    if (Boolean(custombanner) == true && urltype(url).includes("sd-1") || urltype(url).includes("csnsd-1"))
        document.getElementsByClassName("banner")[0].src = urlb;

    // Title bypass (clentside) function
    if (Boolean(tgtb) == true && urltype(url).includes("sd-1")) {
        let tb = document.createElement('input')
        tb.type = 'text'
        tb.placeholder = 'Title length (client if >50)'
        document.getElementsByClassName("right-buttons tab-buttons")[0].appendChild(tb)
        tb.oninput = function () {
            document.getElementById('title').maxLength = this.value;
        }
    }

    // Dark mode function
    function dmode() {
        if ((Boolean(darkmode)) && urltype(url).includes("sd-0") && urltype(url).includes("studio-0")) {
            // darkmode main.
            // Font will turn into white to read in dark.
            // Also studio editing will be disable.

            $('#container').attr('style', 'background: #000')
            $('.card').attr('style', 'background-color: #000')
            $('.comics-box').attr('style', 'background-color: #000')
            $('.notification-inner a').attr('style', 'color: #6c757d')
            $('.table').attr('style', 'color: #fff')
            $('.text-body').attr('style', 'color: rgba(var(--bs-white),var(--bs-text-opacity)) !important') // when i write this, this will turn to white. but now i forgor
            $('.text-black').attr('style', 'color: rgba(var(--bs-white),var(--bs-text-opacity)) !important')
            document.documentElement.style.setProperty('--bs-body-color', '#ffffff');
            if (url == 'https://comic.studio/')
                document.getElementsByClassName("w-100")[0].src = "https://cdn.discordapp.com/attachments/954077931360124939/1028601397337399376/icon_black.png" // Adding edited icon so you can see it.
            document.body.style.color = '#ffffff';
        }
        /*
    if ((Boolean(darkmode) == false) && urltype(url).includes("sd-0") && urltype(url).includes("studio-0")) {
    $('#container').attr('style', 'background: #fff')
    $('.card').attr('style', 'background-color: #fff')
    $('.comics-box').attr('style', 'background-color: #fff')
    $('.notification-inner a').attr('style', 'color: #000000')
    $('.table').attr('style', 'color: #000')
    $('.text-body').attr('style', 'color: rgba(var(--bs-black),var(--bs-text-opacity)) !important')
    $('.text-black').attr('style', 'color: rgba(var(--bs-black),var(--bs-text-opacity)) !important')
    document.documentElement.style.setProperty('--bs-body-color', '#000000');
    if (url == 'https://comic.studio/') document.getElementsByClassName("w-100")[0].src = "https://cdn.comic.studio/assets/img/icon_black.png" // Original
    document.body.style.color = '#000000';
    }
     */
    };

    // For CWF
    var rescw1 = "";
    var rescw2 = "";
    var blankcw = "";

    function getroletype(level) {
        let res = "";
        if (level == "level-1")
            res = "Studio Helper";
        if (level == "level-2")
            res = "Moderator";
        if (level == "level-3")
            res = "Administrator";
        if (level == "level-4")
            res = "Developer";
        return res;
    }

    function execute() {
        /*
    // Zoom out 50% for studio editor because menu broken
    if (urltype(url).includes("studio-1")) document.body.style.zoom = "50%";
    else document.body.style.zoom = "100%";
     */

        // Custom Welcome function
        if (Boolean(customwelcome) && url == 'https://comic.studio/' || url == 'https://comic.studio/?show=all') {
            var wm = document.getElementsByClassName('display-5 fw-bold lh-1 mb-3')[0];
            var text = wm.textContent;
            var preno = text.replace('Welcome, ', '');
            var nameonl = preno.replace('!', '');

            if (Boolean(inclnm)) {
                if (rescw1 == wm.textContent)
                    rescw1 = wm.textContent; // Took me half of day to figure out
                else
                    rescw1 = blankcw.concat(fw, nameonl, lw);
                wm.innerHTML = rescw1;
            } else {
                if (rescw2 == wm.textContent)
                    rescw2 = wm.textContent; // Took me half of day to figure out
                else
                    rescw2 = entstr;
                wm.innerHTML = rescw2;
            }
        }

        // Custom Namerole function
        if (Boolean(namerole) && urltype(url).includes("user-1")) {
            const usernameElement = document.querySelector('#username');
            const unelement = document.getElementById('username');
            const username = usernameElement.innerHTML;

            if (username == n4r) {
                usernameElement.classList.add(rolelevel);
                if (sync == "true") {
                    if (customtype == "true" && customtypetxt != "") {
                        const newElement = '<p class="' + rolelevel + '">' + customtypetxt + '</p>';
                        unelement.insertAdjacentHTML('afterend', newElement);
                    } else if (customtype == "false") {
                        if (getroletype(rolelevel) != "") {
                            const newElement = '<p class="' + rolelevel + '">' + getroletype(rolelevel) + '</p>';
                            unelement.insertAdjacentHTML('afterend', newElement);
                        }
                    }
                } else if (sync == "false") {
                    if (customtype == "true" && customtypetxt != "") {
                        const newElement = '<p class="' + nrlevel + '">' + customtypetxt + '</p>';
                        unelement.insertAdjacentHTML('afterend', newElement);
                    }
                    if (customtype == "false") {
                        const newElement = '<p class="' + nrlevel + '">' + nrrole + '</p>';
                        unelement.insertAdjacentHTML('afterend', newElement);
                    }
                }
            } else if (n4r == "") {
                usernameElement.classList.add(rolelevel);
                if (sync == "true") {
                    if (customtype == "true" && customtypetxt != "") {
                        const newElement = '<p class="' + rolelevel + '">' + customtypetxt + '</p>';
                        unelement.insertAdjacentHTML('afterend', newElement);
                    } else if (customtype == "false") {
                        if (getroletype(rolelevel) != "") {
                            const newElement = '<p class="' + rolelevel + '">' + getroletype(rolelevel) + '</p>';
                            unelement.insertAdjacentHTML('afterend', newElement);
                        }
                    }
                } else if (sync == "false") {
                    if (customtype == "true" && customtypetxt != "") {
                        const newElement = '<p class="' + nrlevel + '">' + customtypetxt + '</p>';
                        unelement.insertAdjacentHTML('afterend', newElement);
                    }
                    if (customtype == "false") {
                        const newElement = '<p class="' + nrlevel + '">' + nrrole + '</p>';
                        unelement.insertAdjacentHTML('afterend', newElement);
                    }
                }
            }
        }

        // More Tab function
        if (Boolean(mtb) && urltype(url).includes("studio-1")) {
            var newTabButton = document.getElementById("tab-new");
            newTabButton.removeAttribute("id");
            newTabButton.setAttribute("class", "btn btn-secondary");
        }

        // Background function
        if (Boolean(background) && urltype(url).includes("studio-0") && urltype(url).includes("sd-0")) {
            // Get the div element with id "container"
            const container = document.getElementById("container");

            // Check if the container element exists
            if (container) {
                // Set the background image URL
                const bgUrl = bgurl;

                // Set the background image style
                const bgStyle = `background-image: url(${bgUrl}); background-size: 100vw auto;`;

                // Set the new style for the div element
                container.setAttribute("style", bgStyle);
            } else {
                console.error('ignored');
            }
        }

    }
}
else
{
    auth();
}